#labels Phase-Implementation
= *Développement de Reyn Tweets* =

Où en est Reyn Tweets ?

== Ce qui est fait ==

  * Architecture d'un Appel à l'API Twitter.
  * Intégration de QJSON ([http://qjson.sourceforge.net]) pour le parsage des résultats délivrés par l'API Twitter.
  * Parsage des résultats de l'API Twitter avec QJSON.
  * Traitement des cas d'erreur.
  * Fix du crash sur le lancement de Reyn Tweets après la refonte de RequestResult (issue 8).
  * Passage à QtCreator 2.4.0 : vérifier qu'il n'y a pas eu de problèmes.
  * _Authentification avec OAuth :_ [https://code.google.com/p/reyn-tweets/wiki/OAuthWork?ts=1325950615&updated=OAuthWork]
  * Sauvegarde des données d'une utilisation sur l'autre
    * Sérialisation des tokens existants pour être réutilisés d'une utilisation du logiciel à l'autre.
    * Chargement des données dans l'application et leur sauvegarde.
    * Mise en place d'une architecture pour ça.
    * Coder
    * Tester
    * Résoudre le bug des dates (issue 51) -> Fait avec une classe spéciale ReynTweetsDateTime.
  * Documentation :
    * Génération de la documentation Doxygen de Reyn Tweets.
    * Automatisation de la génération de documentation.
  * Modèle de données
    * Modèle pour la sérialisation.
    * Modèle d'un user
    * Modèle d'un tweet et de ses sous composants (Tweet Entities)
    * Modèle d'une timeline
    * Mettre à jour la doc' de ce qui a déjà été fait.
    * Résoudre le bug des dates (issue 51).
  * Interface graphique (UI)
    * Portage QML de l'application (UI gérée avec QML/ Qt Quick et non C++/Qt comme initialement prévu)
    * UI quand on arrive sur l'application :
      * UI au lancement de l'appli réalisée en QML.
      * Ecrans d'autorisation à manipuler le compte Twitter.
      * Ecran de chargement (l'OAuthManager qui récupère ses tokens au lancement)
  * Architecture de l'application.


== Ce qui reste à faire ==

  # Modèle de données
    # Renommer le fichier des fichiers de la classe ReynTweetsListable
    # Faire du rangement dans les classes de modèle
  # Documentation :
    # Mettre à jour la documentation Doxygen après que l'architecture soit au point et que le lancement s'effectue correctement
    # Approfondir la documentation
    # Faire de la documentation technique non Doxygen. À voir si tout est mis dans le wiki ou pas. Une page existe déjà pour l'architecture ([https://code.google.com/p/reyn-tweets/wiki/Architecture]).
    # Publication quelque part (Google Sites ?)
  # Implémentation des fonctionnalités de base.
    # Téléchargement de la timeline perso de l'utilisateur
    # Ecrire un tweet et le poster.
  # Faire des tests unitaires et d'intégration (issue 20).
  # Interface graphique (UI) :
    # Interface desktop à designer.
    # UI d'un tweet (format résumé et détaillé).
    # UI d'un user (résumé et détaillé)
    # Timelines (listes de tweets)
    # Listes d'utilisateurs
    # UI de la partie options, popur les paramètres.
    # ...
  # Portage sur Symbian
  # Revue de code
    # TwitterCommunicator pour requêtes authentifiées (issue 33)
    # Sérialisation et requesters (issue 44)
    # Remontage des tokens (issue 46)
    # Composants graphique non faits manu militari sur desktop (issue 56)
    # ... (cf. bug reporter)
  # Releaser publiquement dès que je jugerai que ce sera suffisemment bon.