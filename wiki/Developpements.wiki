#summary Où en sont les développements de Reyn Tweets ?
#labels Phase-Implementation

= *Développement de Reyn Tweets* =

Où en est Reyn Tweets ?

== Ce qui est fait ==

  * Architecture d'un Appel à l'API Twitter.
  * Intégration de QJSON ([http://qjson.sourceforge.net]) pour le parsage des résultats délivrés par l'API Twitter.
  * Parsage des résultats de l'API Twitter avec QJSON.
  * Traitement des cas d'erreur.
  * Fix du crash sur le lancement de Reyn Tweets après la refonte de RequestResult (issue 8).
  * Passage à QtCreator 2.4.0 : vérifier qu'il n'y a pas eu de problèmes.
  * _Authentification avec OAuth :_ [https://code.google.com/p/reyn-tweets/wiki/OAuthWork?ts=1325950615&updated=OAuthWork]
  * Sauvegarde des données d'une utilisation sur l'autre
    * Sérialisation des tokens existants pour être réutilisés d'une utilisation du logiciel à l'autre.
    * Chargement des données dans l'application et leur sauvegarde.
    * Mise en place d'une architecture pour ça.
    * Coder
    * Tester
    * Résoudre le bug des dates (issue 51) -> Fait avec une classe spéciale ReynTweetsDateTime.
  * Documentation :
    * Génération de la documentation Doxygen de Reyn Tweets.
    * Automatisation de la génération de documentation avec des règles Makefile supplémentaires (doc et cleandoc).
    * Mettre à jour la documentation Doxygen après que l'architecture soit au point et que le lancement s'effectue correctement (retard).
    * License dans la documentation des fichiers.
  * Modèle de données
    * Modèle pour la sérialisation.
    * Modèle d'un user
    * Modèle d'un tweet et de ses sous composants (Tweet Entities)
    * Modèle d'une timeline
    * Mettre à jour la doc' de ce qui a déjà été fait.
    * Résoudre le bug des dates (issue 51).
    * Renommer le fichier des fichiers de la classe ReynTweetsListable
    * Faire du rangement dans les classes de modèle
  * Interface graphique (UI)
    * Portage QML de l'application (UI gérée avec QML/ Qt Quick et non C++/Qt comme initialement prévu)
    * UI quand on arrive sur l'application :
      * UI au lancement de l'appli réalisée en QML.
      * Ecrans d'autorisation à manipuler le compte Twitter.
      * Ecran de chargement (l'OAuthManager qui récupère ses tokens au lancement)
  * Traduction
    * Automatisation de la traduction pour le développement sur Windows
    * Chargement de la traduction dans les fichiers QML (issue 64).
  * Architecture de l'application.
  * Implémentation des fonctionnalités de base.
    * Téléchargement de la timeline perso de l'utilisateur
    * Mise en place de l'architecture pour des composants listes
    * Ecrire un tweet et le poster.
  * Interface graphique (UI) :
    * Timelines (listes de tweets)
    * UI d'un tweet (format résumé).
  * Traduction
    * Règles Makefile supplémentaires pour lupdate (trupdate), lrelease (trrelease), déployer les .qm (trdeploy) et effacer les .qm (trclean).
  * Intégration de TwitLonger : TwitLongerWork.
  * Créer des structures pour releaser :
    * Sur Windows :
      * Script pour créer des installateurs
    * Sur Linux :
      * Création de tarballs
      * Créations de binaires : .deb (perfectible).
  * Release d'une 0.1 alpha 1 (0.1) et d'une 0.1 alpha 2 (0.2).


== Ce qui reste à faire ==

  # Implémentation des fonctionnalités de base.
  # Modèle de données
    # Memento
    # Types de timelines et particularités.
  # Interface graphique (UI) :
    # Interface desktop à designer.
    # UI d'un tweet : câblage.
    # UI d'un user (résumé et détaillé)
    # Listes d'utilisateurs
    # UI de la partie options, pour les paramètres.
    # ...
  # Documentation :
    # Mettre à jour la documentation Doxygen après que l'architecture soit au point et que le lancement s'effectue correctement
    # Approfondir la documentation
    # Faire de la documentation technique non Doxygen. À voir si tout est mis dans le wiki ou pas. Une page existe déjà pour l'architecture ([https://code.google.com/p/reyn-tweets/wiki/Architecture]).
    # Publication quelque part (Google Sites ?)
  # Faire des tests unitaires et d'intégration (issue 20).
  # Portage sur Symbian
    # UI d'un tweet (format résumé) inutile sur desktop.
  # Revue de code
    # TwitterCommunicator pour requêtes authentifiées (issue 33)
    # Sérialisation et requesters (issue 44)
    # Remontage des tokens (issue 46)
    # Composants graphique non faits manu militari sur desktop (issue 56)
    # ... (cf. bug reporter)
  # Créer des structures pour releaser :
    # Sur Linux :
      # Créations de binaires : .deb à peaufiner, .rpm, .bin ?
      # Création de PPAs pour Ubuntu (stable, advanced).
  # Releaser publiquement dès que je jugerai que ce sera suffisemment bon.