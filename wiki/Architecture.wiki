#summary Page sur l'architeture générale de l'application
#labels Architecture

= Architecture de Reyn Tweets : =

Les 7 couches de l'architecture de Reyn Tweets :

  # *Interface utilisateur*
    * _Vues QML_ : UI de l'application. Elles sont écrites en QML (c'est même la seule partie du programme en QML).
  # *Logique de l'application*
    * _Contrôles_ : classes C++ servant d'intermédiaire entre les vues QML et le reste du programme :
      * Ils reçoivent les notifications des vues QML et les traduisent en actions à réaliser par l'application.
      * Ils reçoivent les résultats des actions demandées et assurent la mise à jour des vues QML.
    * _Core_ : partie centrale de Reyn Tweets symbolisée par une classe unique, le *`ReynCore`*. Il gère la configuration et les actions à réaliser par l'application.
    * _Processes_ : classes symbolisant les actions à réaliser. Pour cela, ils doivent souvent demander des informations à Twitter (ou autre service tiers).
  # *Communication avec Twitter et autres services tiers*
    * _Calls_ : classes génériques recensant les appels unitaires à l'API de Twitter ou à celles des services tiers utilisés par Reyn Tweets. C'est l'équivalent du `ReynCore` pour les appels aux services (typiquement Twitter). Pour Twitter, les calls sont eux symbolisés par une classe unique, les `ReynTwitterCalls`. Ils gèrent également les paramètres d'authentification auprès de Twitter via un OAuth Manager (classe `OAuthManager`). Plus généralement, chaque service a ses _Calls_.
      * Lors d'une demande, ils invoquent des requesters chargés d'appeler le service.
      * Lors de la réponse, ils récupèrent les résultats des requesters et les encapsulent dans des `ResultWrapper`s afin que les processes ne récupèrent pas de mauvais résultats.
    * _Requesters_ : classes symbolisant un appel unitaire à un service donné (typiquement Twitter). Ils sont les équivalents des processes logiques dans la connexion aux services.
      * Lors d'une demande, ils trient les headers HTTP et les arguments GET et POST à passer au service et demandent au communicators de lancer la requête
      * Lors de la réponse, ils parsent les résultats bruts renvoyés par Twitter et les encapsulent dans des objets de type `RequestResult`.
    * _Communicators_ : entités chargées de communiquer directement avec les API des services.
      * Lors d'une demande, ils préparent les requêtes HTTP à envoyer et les lancent via un `QNetworkAccessManager` de Qt.
      * Lors de la réponse, ils extraient les résultats bruts de la requête (code HTTP, contenu de la réponse, etc.).
      * Ils ont également un système de timeout (fixé à 10 secondes) pour les requêtes qui s'éternisent.