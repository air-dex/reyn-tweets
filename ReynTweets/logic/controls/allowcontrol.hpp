/// @file allowcontrol.hpp
/// @brief Header of AllowControl
/// @author Romain Ducher
///
/// @section LICENSE
///
/// Copyright 2012, 2013 Romain Ducher
///
/// This file is part of Reyn Tweets.
///
/// Reyn Tweets is free software: you can redistribute it and/or modify
/// it under the terms of the GNU Lesser General Public License as published by
/// the Free Software Foundation, either version 3 of the License, or
/// (at your option) any later version.
///
/// Reyn Tweets is distributed in the hope that it will be useful,
/// but WITHOUT ANY WARRANTY; without even the implied warranty of
/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
/// GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License
/// along with Reyn Tweets. If not, see <http://www.gnu.org/licenses/>.

#ifndef ALLOWCONTROL_HPP
#define ALLOWCONTROL_HPP

#include "genericcontrol.hpp"
#include "logincontrol.hpp"

/// @class AllowControl
/// @brief Control behind a LoginComponent
class AllowControl : public GenericControl
{
	Q_OBJECT

	public:
		/// @fn AllowControl();
		/// @brief Constructor
		AllowControl();

		/// @fn static void declareQML();
		/// @brief Declaring to the QML system
		static void declareQML();

		/// @fn Q_INVOKABLE void allowReynTweets();
		/// @brief Getting temporary tokens for the OAuth authentication flow.
		Q_INVOKABLE void allowReynTweets();

		/// @fn Q_INVOKABLE bool endAuth(QString postauthURL);
		/// @brief Finishing the authentication
		/// @param postauthURL URL after authenticating
		/// @return true if it is the very end, false if the app is still in the
		/// POST authorizing state.
		Q_INVOKABLE bool endAuth(QString postauthURL);

		/// @fn Q_INVOKABLE void getAccessTokens(QString verifier);
		/// @brief Getting the final OAuth tokens after user authorization
		/// (via the QML embedded browser)
		Q_INVOKABLE void getAccessTokens(QString verifier);
/*
		/// @fn Q_INVOKABLE QString getBodyClass(QString html);
		/// @brief Getting the class name of the &lt;body&gt; HTML tag of a
		/// HTML source code.
		/// @param html The HTML source code
		/// @return &lt;body class="what the method returns"&gt;
		Q_INVOKABLE QString getBodyClass(QString html);
//*/
		/// @fn LoginControl * getLoginControl();
		/// @brief Reading the login_control property
		/// @return control
		LoginControl * getLoginControl();

		/// @fn void setLoginControl(LoginControl * ctrl);
		/// @brief Writing the login_control property
		/// @param ctrl New value for control
		void setLoginControl(LoginControl * ctrl);


	signals:
		/// @fn void showLoginPopup(bool popupVisible);
		/// @brief Signal sent to modify the visibility of the popup used to
		/// ask the user to give its credentials.
		/// @param popupVisible Boolean indicating if the popup has to be
		/// shown or hidden.
		void showLoginPopup(bool popupVisible);

		/// @fn void needVerifier(QString htmlPage, QString baseURL);
		/// @brief Signal after asking for OAuth Request Tokens suucessfully.
		///
		/// It sends the HTML page generated by Twitter for authorizing the app.
		/// @param htmlPage The HTML page for authorization.
		/// @param baseURL Base URL for loading the page
		void needVerifier(QString htmlPage, QString baseURL);


	protected slots:
		/// @fn void validCredentials(bool valid);
		/// @brief Slot executed when reyn tells the control if the credentials
		/// given by the user were right.
		/// @param valid Boolean whose value is true if the credentials are OK.
		void validCredentials(bool valid);

		/// @fn void credentialsNeeded();
		/// @brief Slot executed when reyn tells the control that it needs
		/// user credentials.
		void credentialsNeeded();

		/// @fn void requestTokensOK(ProcessWrapper res);
		/// @brief Slot executed after getting OAuth Request tokens
		/// @param res The process result
		void requestTokensOK(ProcessWrapper res);

		/// @fn void accessTokensOK(ProcessWrapper res);
		/// @brief Slot executed after getting OAuth Access tokens
		/// @param res The process result
		void accessTokensOK(ProcessWrapper res);

	protected:
		/// @property login_control
		/// @brief Control behind the authentication popup
		Q_PROPERTY(LoginControl * login_control
				   READ getLoginControl
				   WRITE setLoginControl)

		/// @brief Value behind login_control property
		LoginControl * control;

	private:
		/// @fn void allowWiring();
		/// @brief Wiring for authentication process
		void allowWiring();

		/// @fn void allowUnwiring();
		/// @brief Disconnect what was connected while executing
		/// <code>allowWiring();</code>.
		void allowUnwiring();
};

#endif // ALLOWCONTROL_HPP
